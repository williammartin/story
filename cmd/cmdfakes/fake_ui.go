// Code generated by counterfeiter. DO NOT EDIT.
package cmdfakes

import (
	"story/cmd"
	"sync"
)

type FakeUI struct {
	DisplayTableStub        func([]string, [][]string)
	displayTableMutex       sync.RWMutex
	displayTableArgsForCall []struct {
		arg1 []string
		arg2 [][]string
	}
	DisplayTextStub        func(string, ...map[string]interface{})
	displayTextMutex       sync.RWMutex
	displayTextArgsForCall []struct {
		arg1 string
		arg2 []map[string]interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUI) DisplayTable(arg1 []string, arg2 [][]string) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	var arg2Copy [][]string
	if arg2 != nil {
		arg2Copy = make([][]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.displayTableMutex.Lock()
	fake.displayTableArgsForCall = append(fake.displayTableArgsForCall, struct {
		arg1 []string
		arg2 [][]string
	}{arg1Copy, arg2Copy})
	fake.recordInvocation("DisplayTable", []interface{}{arg1Copy, arg2Copy})
	fake.displayTableMutex.Unlock()
	if fake.DisplayTableStub != nil {
		fake.DisplayTableStub(arg1, arg2)
	}
}

func (fake *FakeUI) DisplayTableCallCount() int {
	fake.displayTableMutex.RLock()
	defer fake.displayTableMutex.RUnlock()
	return len(fake.displayTableArgsForCall)
}

func (fake *FakeUI) DisplayTableCalls(stub func([]string, [][]string)) {
	fake.displayTableMutex.Lock()
	defer fake.displayTableMutex.Unlock()
	fake.DisplayTableStub = stub
}

func (fake *FakeUI) DisplayTableArgsForCall(i int) ([]string, [][]string) {
	fake.displayTableMutex.RLock()
	defer fake.displayTableMutex.RUnlock()
	argsForCall := fake.displayTableArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUI) DisplayText(arg1 string, arg2 ...map[string]interface{}) {
	fake.displayTextMutex.Lock()
	fake.displayTextArgsForCall = append(fake.displayTextArgsForCall, struct {
		arg1 string
		arg2 []map[string]interface{}
	}{arg1, arg2})
	fake.recordInvocation("DisplayText", []interface{}{arg1, arg2})
	fake.displayTextMutex.Unlock()
	if fake.DisplayTextStub != nil {
		fake.DisplayTextStub(arg1, arg2...)
	}
}

func (fake *FakeUI) DisplayTextCallCount() int {
	fake.displayTextMutex.RLock()
	defer fake.displayTextMutex.RUnlock()
	return len(fake.displayTextArgsForCall)
}

func (fake *FakeUI) DisplayTextCalls(stub func(string, ...map[string]interface{})) {
	fake.displayTextMutex.Lock()
	defer fake.displayTextMutex.Unlock()
	fake.DisplayTextStub = stub
}

func (fake *FakeUI) DisplayTextArgsForCall(i int) (string, []map[string]interface{}) {
	fake.displayTextMutex.RLock()
	defer fake.displayTextMutex.RUnlock()
	argsForCall := fake.displayTextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.displayTableMutex.RLock()
	defer fake.displayTableMutex.RUnlock()
	fake.displayTextMutex.RLock()
	defer fake.displayTextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmd.UI = new(FakeUI)
