// Code generated by counterfeiter. DO NOT EDIT.
package cmdfakes

import (
	"story"
	"story/cmd"
	"sync"
)

type FakeAppFetcher struct {
	FetchAppsStub        func() ([]story.App, error)
	fetchAppsMutex       sync.RWMutex
	fetchAppsArgsForCall []struct {
	}
	fetchAppsReturns struct {
		result1 []story.App
		result2 error
	}
	fetchAppsReturnsOnCall map[int]struct {
		result1 []story.App
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppFetcher) FetchApps() ([]story.App, error) {
	fake.fetchAppsMutex.Lock()
	ret, specificReturn := fake.fetchAppsReturnsOnCall[len(fake.fetchAppsArgsForCall)]
	fake.fetchAppsArgsForCall = append(fake.fetchAppsArgsForCall, struct {
	}{})
	fake.recordInvocation("FetchApps", []interface{}{})
	fake.fetchAppsMutex.Unlock()
	if fake.FetchAppsStub != nil {
		return fake.FetchAppsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.fetchAppsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAppFetcher) FetchAppsCallCount() int {
	fake.fetchAppsMutex.RLock()
	defer fake.fetchAppsMutex.RUnlock()
	return len(fake.fetchAppsArgsForCall)
}

func (fake *FakeAppFetcher) FetchAppsCalls(stub func() ([]story.App, error)) {
	fake.fetchAppsMutex.Lock()
	defer fake.fetchAppsMutex.Unlock()
	fake.FetchAppsStub = stub
}

func (fake *FakeAppFetcher) FetchAppsReturns(result1 []story.App, result2 error) {
	fake.fetchAppsMutex.Lock()
	defer fake.fetchAppsMutex.Unlock()
	fake.FetchAppsStub = nil
	fake.fetchAppsReturns = struct {
		result1 []story.App
		result2 error
	}{result1, result2}
}

func (fake *FakeAppFetcher) FetchAppsReturnsOnCall(i int, result1 []story.App, result2 error) {
	fake.fetchAppsMutex.Lock()
	defer fake.fetchAppsMutex.Unlock()
	fake.FetchAppsStub = nil
	if fake.fetchAppsReturnsOnCall == nil {
		fake.fetchAppsReturnsOnCall = make(map[int]struct {
			result1 []story.App
			result2 error
		})
	}
	fake.fetchAppsReturnsOnCall[i] = struct {
		result1 []story.App
		result2 error
	}{result1, result2}
}

func (fake *FakeAppFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchAppsMutex.RLock()
	defer fake.fetchAppsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAppFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmd.AppFetcher = new(FakeAppFetcher)
